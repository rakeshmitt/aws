Reference: https://www.bacancytechnology.com/blog/connect-mysql-to-ec2-instance

Login to ubuntu using default user "ubuntu"

Step 1: Update System Packages and Install MySQL

  Run install update for your server system packages

    >> sudo apt update

  install MySQL using the below command to install the latest MySQL.


    >>sudo apt-get install mysql-server -y

  After successful installation of mysql-server, we can check the MySQL version by using this command

    >> mysql --version


Step 2: Configure MySQL Installation

  To configure the installation of MySQL, run the security script with sudo to run as the root user- the super privileged user.

  Run the below command-

     >> sudo mysql_secure_installation

          remove anonymous user: (press any key)
          Disallow remote login remotely: n
          remove test database and access to it: n
          Reload privilege tables now: y

  When we install MySQL for the first time, we will be prompted to create a new password.
  If you are getting an error while setting up the password, check the temporary password in the log file.

  Use the below command to get a temporary password.

    >> cat /var/log/mysqld.log


Step 3: Login into MySQL and Create a User

    Use the below command to login into MySQL:

    >> sudo mysql 

The command will log in to MySQL using the root user. Once you are logged in, create a user in the MySQL database using these commands:

  >> use mysql;
  >> CREATE USER 'username'@'host' IDENTIFIED WITH mysql_native_password BY 'password';



Step 4: Grant Access Privileges to User

  Now, to grant access privileges to this newly created user, use this command:

    >> GRANT ALL PRIVILEGES ON *.* TO 'username'@'host';
    >> FLUSH PRIVILEGES;


Step 5: Connect User with MySQL

  Now you can use this user to connect with MySQL like this:
    >> mysql -u user -p



If you want to store passwords for that user, so prompting will not annoy us, do these things.
Create .my.cnf file inside /home/Ubuntu path

>> sudo nano .my.cnf

Write these lines in that file and save.

[mysql]
user=username
password=password

Now, whenever you want to connect, you can use this .my.cnf file like this, and no need to provide a password.

>> mysql --defaults-file=/home/ubuntu/.my.cnf -u username

Step 6: Restart MySQL Service

  To affect these changes, restart the MySQL service by following commands: 
  to check the status of MySQL service:

  >> systemctl status mysql.service

Now, if it is in “Running” mode, then restart it using the below command:

  >> sudo service mysql restart





UPDATING THE DATA DIRECTORY
----------------------------

1. Stop mysql
>> sudo service mysql stop
2. copy the existing database directory to the new location
>> copy -Rp /var/lib/mysql <new location path>

  -R flag to copy all the files and subdirectories inside the source directory recursively. 
  -p flag to keep the same permissions, ownership, and timestamps of the original files.

3. it’s a good practice to keep a backup of the original data in case something goes wrong
>> mv /var/lib/mysql /var/lib/mysql.bkp

4. point MySQL to the new data location by editing the configuration file at /etc/mysql/mysql.conf.d/mysqld.cnf.

datadir=/home/mysql     //Notably, we might have to uncomment the line if it’s commented.

5. edit /etc/apparmor.d/usr.sbin.mysqld, change:

/var/lib/mysql/ r,    =>>> <newdir>/mysql/ r,
/var/lib/mysql/** /rwk, ===> <newdir>/mysql/** /rwk,

6. sudo /etc/init.d/apparmor restart
7. sudo chown -R mysql:mysql mysql
8. sudo service mysql start





CHECKING THE PASSWORD POLICY:
--------------------------------

mysql> SHOW VARIABLES LIKE 'validate_password%';

mysql> SET GLOBAL validate_password.policy=LOW;

To make this setting permanent edit MySQL configuration (mysqld.cnf) file and add below settings.
[mysqld]
validate_password.policy=LOW

Save the file and restart the MySQL service to apply changes.


--- Uninstall password validation plugin: -- turning off the password validation

mysql>> UNINSTALL COMPONENT 'file://component_validate_password';


MAINTAING USERS
----------------

1. Create new user:

mysql> create user 'username'@'<host>' IDENTIFIED WITH mysql_native_password BY '<password>';

host => it can have values like localhost, % (for login from anywhere), any specific host

2. Check the existing user:

mysql> select * from mysql.users;

3. Drop user
mysql>> DROP user '<username>'@'<host>';
The host name part of the account name, if omitted, defaults to '%'. 
DROP USER does not automatically close any open user sessions. Rather, in the event that a user with an open session is dropped, 
the statement does not take effect until that user's session is closed. Once the session is closed, the user is dropped, 
and that user's next attempt to log in fails. This is by design.

DROP USER does not automatically drop or invalidate databases or objects within them that the old user created. 
This includes stored programs or views for which the DEFINER attribute names the dropped user. 
Attempts to access such objects may produce an error if they execute in definer security context.

4. GRANT PRIVILEGES TO USER

mysql>> GRANT ALL PRIVILEGES ON <database_name>.* TO '<username>'@'<host>';
- database_name can be * for giving access to all the database

mysql>> FLUSH PRIVILEGES;



LOGIN TO DB:
------------

>> mysql -h host -u user -p dbname   /// this will prompt for password
>> mysql -h host -u user -p<password> dbname /// password can be provided here in the command without any space after p.


Allowing mysql to connect from anywhere or specific ip:
---------------------------------------------------------
Check the mysql listening status:

>>sudo netstat -tlnp

if netstat is not installed then use below command:

>> sudo apt-get install net-tools


By default mysql accept connect only from localhost as the bind-address in /etc/mysql/mysql.conf.d/mysqld.cnf

set the bind-address to 0.0.0.0 (to allow connection from anywhere) or specific ip address


then start the service
>> sudo systemctl restart mysql.service


installing the mysql client in amazonlinux
-----------------------------------------
>> sudo yum install -y https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm

>> sudo rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022

>> sudo yum install -y mysql-community-client


