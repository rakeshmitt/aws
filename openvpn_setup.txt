Ubuntu based linux
-----------------

1. Initial Steps:
------------------

a. provision a ec2 instance in private subnet (without assigning a public ip)
b. security rule should have below inbound rules:
Port range      protocol      source
22              SSH            0.0.0.0/0
1194            UDP            0.0.0.0/0
3. Allocate an elastic ip and associate it with this vm.



2. Key pem to ppk or vice-versa
-------------------------------

a. key created has 2 formats either ppk or pem.
b. putty supports .ppk format whereas openssh support .pem format.
c. Depending on the format, it might need to be converted to the other format using puttygen command.
d. change the permission of the file to 600 (rw-------)
e. run below puttygen command:
$puttygen <keyname>.ppk -O private-openssh -o <keyname>.pem
OR
$puttygen <keyname>.pem -O private-openssh -o <keyname>.ppk



3. Connect to VM
------------------

a. ssh -i <keyname> ubuntu@<VM public ip>
b. once connected run
$sudo apt update
c. check the status of openvpn
$apt policy ovenvpn

output of the above command:

#####
openvpn:
  Installed: (none)
  Candidate: 2.5.9-0ubuntu0.22.04.2
  Version table:
     2.5.9-0ubuntu0.22.04.2 500
        500 http://ap-south-1.ec2.archive.ubuntu.com/ubuntu jammy-updates/main amd64 Packages
     2.5.5-1ubuntu3 500
        500 http://ap-south-1.ec2.archive.ubuntu.com/ubuntu jammy/main amd64 Packages
######
default vpn repository contains openvpn 2.5.9 which may not be the latest one; so check its latest available version in:
https://github.com/OpenVPN/openvpn/tags



4. Installing the openvpn
-----------------------

a. since next few commands need to be run as sudo, so switch to sudo user
$sudo su -

b. Now lets add a GPG key that is used to verify the integrity of the downloaded package
$wget -O - https://swupdate.openvpn.net/repos/repo-public.gpg|apt-key add -

c. then add openvpn ubuntu repository; it is best practice to create a separate list
$echo "deb http://build.openvpn.net/debian/openvpn/stable focal main" > /etc/apt/sources.list.d/openvpn-aptrepo.list

d. Now perform apt update to check what is available now.
$apt update

e. then exit from root user

f. now check again the available version of openvpn
$apt policy openvpn

g. Now install the latest availble version; optionally specify the version with = sign
$sudo apt install openvpn=2.6.9-focal0

#####
this command may throw this error:
The following packages have unmet dependencies:
 openvpn : Depends: libssl1.1 (>= 1.1.1) but it is not installable
E: Unable to correct problems, you have held broken packages.
#####

to resolve this issue run below command: (Ubuntu 22.04 has upgraded libssl to 3 and does not propose libssl1.1)
$echo "deb http://security.ubuntu.com/ubuntu focal-security main" | sudo tee /etc/apt/sources.list.d/focal-security.list
$Sudo apt-get update
$sudo apt-get install libssl1.1

Then rerun the command "sudo apt install openvpn=2.6.9-focal0"
Once installed, delete the focal-security list file just created: 
$sudo rm /etc/apt/sources.list.d/focal-security.list


5. Managing public Key
-----------------------
Some kind of tool is required to manage the public Key Infrastructure (PKI). It is very common to use easy-rsa with openvpn; since it is a tool built by openVPN community.
However we can use the  CFSSL, openssl or any other option to maintain certificates. lets try with easy-rsa option.

    5.1 easy-rsa
    -------------
    a. $apt policy easy-rsa
    b. check the latest available version from https://github.com/OpenVPN/easy-rsa
    c. lets just download the tarball and place it
    $wget https://github.com/OpenVPN/easy-rsa/releases/download/v3.1.7/EasyRSA-3.1.7.tgz
    $tar -zxf EasyRSA-3.1.7.tgz
    clean up the .tgz file.
    d. Move the EasyRSA under openvpn (since we would be using the same tool for certificate generation)
    $sudo mv EasyRSA-3.1.7/ /etc/openvpn/easy-rsa

    e. optionally, we can create a softlink to /usr/local/bin
    $sudo ln -s /etc/openvpn/easy-rsa/easyrsa /usr/local/bin
    $easyrsa --version (to confirm it is ready to use)

    f. The first step with easyrsa is to first initialize the folder for keys and certificates
    $cd /etc/openvpn/easy-rsa/
    $easyrsa init-pki

    g. We can create vars file to customize the certificates
    $vim vars

      ###
        set_var EASYRSA_REQ_COUNTRY     "IN"
        set_var EASYRSA_REQ_STATE       "AS"
        set_var EASYRSA_REQ_CITY        "Rangapara"
        set_var EASYRSA_REQ_ORG         "rakesh"
        set_var EASYRSA_REQ_EMAIL       "rakesh1@rakesh.com"
        set_var EASYRSA_REQ_OU          "MittalSoft"
        set_var EASYRSA_ALGO            "ec"
        set_var EASYRSA_REQ_DIGEST      "sha512"
      ###

    note here that Algo, we are using is ec (elliptic curve); ec cryptography provides more security and eliminates the need for Diffie-Hellman parameters file.
    if anyone gets access to the private key, they will be able to issue a certificate and connect to openvpn.

    h. ideally when we generate a key we should always provide a passphrase as that is the password. However for demo purpose we can generate certificate with "nopass" with gate-sso.

        $easyrsa build-ca nopass

      all the private keys including ca key will be stored in pki/private folder.

    i. Since we are using the public key cryptography, we need to generate certificate for both server and client. Lets create one for server first (using same nopass option)

      In the case of client/servers certs, it is a two step process-
          i) first generate keypair with a certificate request
               $easyrsa gen-req openvpn-server nopass
          ii) then use ca to sign the certificate request and issue a valid certificate.
               $easyrsa sign-req server openvpn-server

    j. the next step is to create another secret that is not related to PKI. Its called ta.key. It is kind of a crypto firewall. Each packet going over the internet will be signed
      using a shared secret on both server and client. when openvpn receives a packet, it will calculate the signature and check it against the signature provided in the received packet.
      If it doesn't match, openvpn will drop the packet. When coupled with UDP, this can be a good way to avoid troubles with port scanner as it will not see the openvpn port at all.
      This process is also a good way to protect against the unknown bugs in the ssl library and protocols as it reduces the attack surface to only your own user. 

        $openvpn --genkey secret ta.key

      Enabling TLS authentication is highly recommended. The secret needs to be securely copied to all openVPN server and client.

    k. To function properly, we need to make sure IP forwarding is enabled. By default it is commented out in Ubuntu 20.04 and above.

      $sudo vim /etc/sysctl.conf
      ###
        uncomment below line
         net.ipv4.ip_forward=1
      ###
      $sudo sysctl -p

    l. We need to configure an iptable rule to use this server as NAT to translate client IP to openvpn server ip. That is a reason why we use the openvpn security group as a source for any instance in our vpc.
        lets list some default policies

      $sudo iptables -t nat -S
    ######
       -P PREROUTING ACCEPT
       -P INPUT ACCEPT
       -P OUTPUT ACCEPT
       -P POSTROUTING ACCEPT
    ######

    by default, they all set to ACCEPT.

    We can use high level firewall tools like UFW (Uncomplicated firewall); however if we enable, it will create bunch of rules. Here we would create only one iptable rule for now.
    Before adding the rule, we need to find the network interface used in the vm.

    $ip route list default
    ### output would be something like below.
    default via 10.0.0.1 dev eth0 proto dhcp src 10.0.0.61 metric 100
    ###
    here it is network interface is eth0.

    ----Create a nat rule that would translate all the ip range coming from 10.8.0.0/24 to openVPN ubuntu server ip. This range is a virtual network that we would define later for vpn.

    $sudo iptables -t nat -I POSTROUTING -s 10.8.0.0/24 -o eth0 -j MASQUERADE

    All the client and OpenVPN server will get ip from this range. If we are using plain iptables, we need to find a way to persists these rule and apply them after the reboot. One way to do this is the use of iptables-persistent package. It will ask to save ipv4 and ipv6 iptable rules. 

        $sudo apt-get install iptables-persistent


  m. Configuring the main vpn server: (this will be the main configuration for the server)
---------------------------------------

    $sudo vim /etc/openvpn/server/server.conf

#####################

# Port for openVPN
port 1194

#protocol, can be tcp or udp (generally it is udp)
proto udp

#It will create a routed IP tunnel; possible values are tap or tun
# TAP -> if we want to transport non-IP based traffic or IPV6 traffic on openvpn2.2 or older releases or want to bridge.
dev tun

#Location of the certificate Authority(can use relative or full path)
# we can even insert cert inline in the config;
ca /etc/openvpn/easy-rsa/pki/ca.crt

#Location of the openVPN certificate
cert /etc/openvpn/easy-rsa/pki/issued/openvpn-server.crt

#Location of the openvpn private key
key /etc/openvpn/easy-rsa/pki/private/openvpn-server.key

#disable Diffie Hellman since we are using elliptic curves certificate
dh none

# Location of the ta secret that used it is used as an additional HMAC signature#to all SSL/TLS handshake packets for integrity verification. 
# value should be 0 on the server and 1 on the client
tls-crypt /etc/openvpn/easy-rsa/ta.key 0

# cipher to use; Auth used to authenticate received packages
cipher AES-256-GCM
auth SHA256


#Virtual network config, ip range and a mask. It will be /24. 
# It will give us 256 hosts that's how many client you can connect at the same time
#
# configure server mode to supply vpn subnet
# for OpenVPN to draw client addresses from.
server 10.8.0.0 255.255.255.0

#location to save records of the client virtual ip addresses
ifconfig-pool-persist /var/log/openvpn/ipp.txt

#ping like messages to be sent back and forth to check the status
keepalive 10 120

# used reduce the openVPN daemon's privileges after initialization
# if we dont set the user and group to nobody or nogroup openVPN server fail to start
user nobody
group nogroup

#persist certain options that may no longer  be available because of the privileges downgrade
persist-key
persist-tun

# show current connections; status location can be used by prometheus exporter
# to extract current usage and visualize it in grafana
status /var/log/openvpn/openvpn-status.log

#Log verbosity
verb 3

#Notify the client when the server restarts so it can 
explicit-exit-notify 1

#network topology -- set to subnet if we dont need to support legacy windows clients
topology subnet

# most important part of configuring the server; push routes to the client of the available subnets in AWS. We had created public subnet 10.0.0.0/22; which translates to 255.255.252.0 subnet mask. 
#This particular route needs to be pushed if we want to access the private ip addresses of VMs in that public subnet.
 
#push route from AWS, 10.0.0.0/22
push "route 10.0.0.0 255.255.252.0"


# Next route for a private-large subnet with 240 subnet mask.

#push route from AWS 10.0.16.0/20
push "route 10.0.16.0 255.255.240.0"

#10.0.32.0 is private-small aws subnet.
#push route from AWS 10.0.32.0/24
push "route 10.0.32.0 255.255.255.0"


#push AWS nameserver since we want to use private hosted zone
# we want to able to resolve private Route53 hostnames. Hence need to push the DNS server IP address to the client.
# Route53 DNS IP is always VPC CIDR plus 2, which in our case is 10.0.0.2

push "dhcp-option DNS 10.0.0.2"

######################

    
Lets check if we have nobody user and nogroup.

$cat /etc/passwd | grep nobody
#########
ubuntu@ip-10-0-0-61:~$ cat /etc/passwd | grep nobody
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
##########
    

    
      


  

    
    
  


















